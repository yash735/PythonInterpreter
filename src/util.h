//  -*- Mode: C; -*-                                                       
// 
//  util.h
// 
//  (C) Jamie A. Jennings, 2024

#ifndef util_h
#define util_h

#define _POSIX_C_SOURCE 200809L
#include <string.h>
#include <stdbool.h>
#include <inttypes.h>
#include <stdlib.h>

/*
  Configurable:

  Maximum length, in bytes, of an identifier, an integer, and a string.

  IMPORTANT: These are lengths of the printed representations, so the
  maximum string length the includes the opening and closing quote
  characters.  E.g. "\n" is a 4-byte representation of what turns out
  to be a 1-byte string.
  
*/

#define MAX_IDLEN 60
#define MAX_INTLEN 20
#define MAX_STRINGLEN 1000

#if MAX_IDLEN > UINT16_MAX
  #error Configured length exceeds field size
#endif
#if MAX_INTLEN > UINT16_MAX
  #error Configured length exceeds field size
#endif
#if MAX_STRINGLEN > UINT16_MAX
  #error Configured length exceeds field size
#endif

// For error messages generated by the parser/lexer
#define MAX_MSGLEN 100

/* ----------------------------------------------------------------------------- */
/* Memory allocation                                                             */
/* ----------------------------------------------------------------------------- */

void *xmalloc(size_t sz);

/* ----------------------------------------------------------------------------- */
/* Error handling for runtime errors and code bugs                               */
/* ----------------------------------------------------------------------------- */

#define ERR_PANIC -1

#define PANIC(...) do {					\
    panic_message(__FILE__, __LINE__,  __VA_ARGS__);	\
    exit(ERR_PANIC);					\
  } while (0)

#define PANIC_OOM() do {			        \
    PANIC("Out of memory");				\
  } while (0)

#define PANIC_NULL() do {				\
    PANIC("Required argument is NULL");			\
  } while (0)

void panic_message(const char *filename, int lineno, const char *fmt, ...);

#endif
